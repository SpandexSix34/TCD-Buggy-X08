#include "Arduino_LED_Matrix.h"
#include "WiFiS3.h"

ArduinoLEDMatrix matrix;

char ssid[] = "Pixel 9";        // your network SSID (name)
char password[] = "nfhu5637"; 
WiFiClient client;
// char prevCommand = 'F';


// CHANGE THESE TO MATCH YOUR WIRING, THEN DELETE THE PREVIOUS "#error" LINE
inline void digitalToggle(byte pin){
  digitalWrite(pin, !digitalRead(pin));
}

const short Pin8 = 8;
const short Pin9 = 9;
const short Pin10 = 10;
const short Pin11 = 11;
const short Pin12 = 12;
const short Pin13 = 13;
const short RMove = 3;
const short Pin5 = 5;
const short Pin6 = 6;
const short TrigPin = 7;
const short EchoPin = 4;



//String lastCommand = "stop";

// bool LeftEye = 0;
// bool RightEye = 0;
// bool prevLeft = 1;
// bool prevRight = 1;

unsigned const short initLPower = 115;
unsigned const short initRPower = 115;
unsigned const short maxPower = 115;
unsigned const short minPower = 70;

unsigned short driveMode = 0; //0 is auto, 1 is controlled by GUI. Not a bool because we want more options.

unsigned int LPower = initLPower;
unsigned int RPower = initRPower;
int prevLMPower = 20; 
int prevRMPower = 20;

WiFiServer server(3000);

void setup() {
  Serial.begin(9600);

  pinMode( Pin8, OUTPUT);
  pinMode( Pin9, OUTPUT);
  pinMode( Pin10, OUTPUT);
  pinMode( Pin11, OUTPUT);
  pinMode( Pin12, INPUT);
  pinMode( Pin13, INPUT);
  pinMode( Pin5, OUTPUT);
  pinMode( Pin6, OUTPUT);
  pinMode(TrigPin, OUTPUT);
  pinMode(EchoPin, INPUT);

  //pinMode(RWheelEncoder)

  matrix.begin();

  LMPower(LPower);
  RMPower(RPower);

  while( !Serial) {
    ;
  } //makes sure the program doesnt begin until the serial monitor opens



  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  WiFiClient client = server.available();

  // Start the server
  server.begin();
  Serial.println("Server started");
  Serial.println(WiFi.localIP());

  char prevCommand;
}

char command = ' ';

void Motorleft(bool toGoFoward, bool toGoBack){
  if (toGoFoward){
      digitalWrite(Pin8, HIGH);
  }else{
      digitalWrite(Pin8, LOW);
  }
  if (toGoBack){
      digitalWrite(Pin9, HIGH);
  }else{
      digitalWrite(Pin9, LOW);
  }
}

void Motorright(bool toGoFoward, bool toGoBack){
  if (toGoFoward){
      digitalWrite(Pin10, HIGH);
  }else{
      digitalWrite(Pin10, LOW);
  }
  if (toGoBack){
      digitalWrite(Pin11, HIGH);
  }else{
      digitalWrite(Pin11, LOW);
  }
}

void Motormove(bool ControlLeft, bool ControlRight,bool toStop){ 
  if (toStop){
    Motorleft(1,1); 
    Motorright(1,1); //stop ie if Motormove (0,0,1) will stop it
  } else{
    if (ControlLeft && ControlRight){
      Motorleft(1,0);
      Motorright(1,0);
    } else if (!ControlRight && !ControlLeft) {
        Motorleft(0, 1);
        Motorright(0, 1);
    } else if(ControlLeft){
        Motorleft(1,0);
    } else if(!ControlLeft){
        Motorleft(0, 1);
    } else if(ControlRight){
        Motorright(1,0);
    } else if(!ControlRight){
        Motorright(0, 1);
    } 
  }
}

bool Sensorleft() {
  if (digitalRead(12) == HIGH) { //black
    return true;
  } else {
    return false;
  }

}

bool Sensorright() {
 if (digitalRead(13) == HIGH) { //black
    return true;
  } else {
    return false;
  }

}


void LMPower(int power){
  analogWrite(Pin6, power);
  //Serial.print("Left: ");
  //Serial.println(power); 
}

void RMPower(int power){
    analogWrite(Pin5, power);
    //Serial.print("Right: ");
    //Serial.println(power);
}

void turnLeft(){
    analogWrite(Pin5, maxPower + 20); //Right motor
    RPower = maxPower;
    analogWrite(Pin6, minPower); //left motor
    LPower = minPower;
}

void turnRight(){
    analogWrite(Pin5, minPower); //Right motor
    RPower = minPower;
    analogWrite(Pin6, maxPower + 20); //left motor
    LPower = maxPower;
}

void selfDrive () {
   Serial.println("Entered F loop");
          digitalWrite(TrigPin, LOW);
          digitalWrite(TrigPin, HIGH);
          delay(10);  //zawg this delays us every single time TT, i.e. our code is running on 10 milliseconds delay every time because it wants to check this sensor
          digitalWrite(TrigPin, LOW);
          unsigned long duration = pulseIn(EchoPin, HIGH); //high starts the timing (microsecond)
          float distance = duration * 0.034 / 2; //converts the time to a speed

          //Serial.println(duration);
          Serial.println(distance);


          if (distance < 10) {
            //String sdistance;
            //sdistance = String(distance);
            client.println(distance);
            //client.write("00000");
           // Serial.println("Sensor decteded obstacle");
            Motormove(1, 1, 1);
          } else {
            Serial.println(" Entered post distance-check loop");

            if (Sensorleft() && Sensorright()) { //both on black
            LMPower( maxPower); //set and print
            RMPower( maxPower); //set and print
            LPower = maxPower;
            RPower = maxPower;
            Serial.println("No sensor on line.");
            Motormove(1, 1, 0);
          } else if (!Sensorleft() && !Sensorright()){ //both on white
              //slow down and keep going
              LPower = minPower;
              RPower = minPower;
              Serial.println("Both sensor on line.");
              Motormove(1, 1, 0);
          }
            else if ( !Sensorleft() && Sensorright()){ //sensor left white sensor right is black
              Serial.println("Left sensor on line.");
              turnLeft();
              Serial.println(LPower);
              Serial.println(RPower);
              //delay(50);
              Serial.println("delay done"); 
          } else if ( Sensorleft() && !Sensorright()){
              Serial.println("Right sensor on line.");
              turnRight();
              Serial.println(LPower);
              Serial.println(RPower);
              //delay(50);
              Serial.println("delay done");
                }
              }
} 


// void processCommand() {
//   if(!client || !client.connected()) {
//     client = server.available();

//   }
//   if(client.connected() && client ) {
//     //Serial.println("New client connected");
//     if (client.available()) {
//       char command = client.read();
//       Serial.println(command);
//     }
//     // while(client.available()){
//     // char command = client.read();
//     // if ( command != prevCommand) {
//     //     prevCommand = command;
//     Serial.println(command);
//     if (command != 'S' || command != 'F'){
//       char prevCommand;
//       command = prevCommand;
//     }
//     if (command == 'F') {
//                 selfDrive();
//                 prevCommand = 'F';
//             }
//             else if (command == 'S'){
//               Motormove (0, 0, 1);
//               prevCommand = 'S';
//             }
//     Serial.print("Now: ");
//     Serial.println(command); 
       
   // }     

      //Serial.println(prevCommand);
      // Serial.println("Before F loop");
      // if (prevCommand == 'F') {
      //           selfDrive();
      //       }
      //       else if (preCommand == 'S'){
      //         Motormove (0, 0, 1);
      //       } 
//     }
    
// }



const uint32_t happy[] = {
    0x1f820,
		0x40000900,
		0x90090000,
		66
};

void loop() {

  matrix.loadFrame(happy);
      // Print the message to Serial Monitor

  //WiFiClient client = server.available();

  //processCommand();

  if(!client || !client.connected()) {
    client = server.available();
    if(client){
      Serial.println("Client connected.");
    }

  }
  if(client.connected() && client ) {
    //Serial.println("New client connected");
    if (client.available()) {
      command = client.read();
      Serial.println(command);
    }
      if (command == 'F') {
          selfDrive();
          
            }
            else if (command == 'S'){
              Motormove (0, 0, 1);

            }
  }
}
